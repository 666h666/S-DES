import tkinter as tk
import time

def initial_permutation(data):
    """初始置换IP"""
    IP = (2, 6, 3, 1, 4, 8, 5, 7)
    return int(''.join(data[i - 1] for i in IP), 2)


def final_permutation(data):
    """最终置换IP^-1"""
    IP_inv = (4, 1, 3, 5, 7, 2, 8, 6)
    data_bin = bin(data)[2:].zfill(8)
    return int(''.join(data_bin[i - 1] for i in IP_inv), 2)


def ASCII(x):
    """将字符转换为二进制"""
    return bin(ord(x))[2:].zfill(8)


def UTF(x):
    """将二进制转换为字符"""
    return chr(int(x, 2))


# def left_shift(data, shifts):
#     """左移位操作"""
#     return ((data << shifts) | (data >> (5 - shifts))) & 0x1F


def key_schedule(key):
    """密钥扩展"""
    P10 = (3, 5, 2, 7, 4, 10, 1, 9, 8, 6)
    permuted_key = ''.join(key[i - 1] for i in P10)
    # 左移一位和两位后进行压缩置换P8
    k1_left = bin(int(permuted_key[:5], 2) << 1)[2:].zfill(6)
    k1_left = k1_left[1:5] + k1_left[0]
    k1_right = bin(int(permuted_key[5:], 2) << 1)[2:].zfill(6)
    k1_right = k1_right[1:5] + k1_right[0]
    k1 = k1_left + k1_right  # 左移1位
    k2_left = bin(int(permuted_key[:5], 2) << 2)[2:].zfill(6)
    k2_left = k2_left[2:5] + k2_left[0] + k2_left[1]
    k2_right = bin(int(permuted_key[5:], 2) << 1)[2:].zfill(6)
    k2_right = k2_right[2:5] + k2_right[0] + k2_right[1]
    k2 = k2_left + k2_right  # 左移2位
    P8 = (6, 3, 7, 4, 8, 5, 10, 9)  # P8置换
    k1 = int(''.join(str(k1)[i - 1] for i in P8), 2)
    k2 = int(''.join(str(k2)[i - 1] for i in P8), 2)
    return k1, k2


def expand_permutation(right):
    """扩展置换EPBox"""
    EP = (4, 1, 2, 3, 2, 3, 4, 1)
    right = str(bin(right)[2:].zfill(4))
    return int(''.join(right[i - 1] for i in EP), 2)


def s_box1(left_half, right_half):
    """S盒1"""
    S1 = [
        [1, 0, 3, 2],
        [3, 2, 1, 0],
        [0, 2, 1, 3],
        [3, 1, 0, 2]
    ]
    return S1[left_half][right_half]


def s_box2(left_half, right_half):
    """S盒2"""
    S2 = [
        [0, 1, 2, 3],
        [2, 3, 1, 0],
        [3, 0, 1, 2],
        [2, 1, 0, 3]
    ]
    return S2[left_half][right_half]


def compression_permutation(data):
    """压缩置换SPBox"""
    SP = (2, 4, 3, 1)
    data = str(bin(data)[2:].zfill(4))
    return int(''.join(data[i - 1] for i in SP), 2)


def turn(x):
    """进行拆解"""
    return int(''.join(x[i] for i in range(0, 2)), 2)


def f_function(right, key):
    """f函数"""
    expanded = expand_permutation(right) ^ key
    left_half = str(bin((expanded >> 2) & 0x3)[2:].zfill(4))
    right_half = str(bin(expanded & 0xF)[2:].zfill(4))
    sb1_left = turn(left_half[0] + left_half[3])
    sb1_right = turn(left_half[1] + left_half[2])
    sb2_left = turn(right_half[0] + right_half[3])
    sb2_right = turn(right_half[1] + right_half[2])
    result = (s_box1(sb1_left, sb1_right) << 2) | s_box2(sb2_left, sb2_right)
    return compression_permutation(result)


def swap(data):
    """SW交换函数"""
    SW = (4, 5, 6, 7, 0, 1, 2, 3)
    data = str(bin(data)[2:].zfill(8))
    return int(''.join(data[i] for i in SW), 2)


def encrypt(plain_text, key):
    """加密函数"""
    k1, k2 = key_schedule(key)
    permuted = initial_permutation(plain_text)
    left, right = divmod(permuted, 16)
    first_round = f_function(right, k1)
    new_left_1 = left ^ first_round
    second_round = f_function(new_left_1, k2)
    new_left_2 = right ^ second_round
    final_result = (new_left_2 << 4) + new_left_1
    return final_permutation(final_result)


def decrypt(cipher_text, key):
    """解密函数"""
    k1, k2 = key_schedule(key)
    permuted = initial_permutation(cipher_text)
    left, right = divmod(permuted, 16)
    first_round = f_function(right, k2)
    new_left_1 = left ^ first_round
    second_round = f_function(new_left_1, k1)
    new_left_2 = right ^ second_round
    final_result = (new_left_2 << 4) + new_left_1
    return final_permutation(final_result)


text = 'Hello World'
plain_text = []
for i in text:
    plain_text.append(ASCII(i))

text_new = ''
text_ture = ''
key = "0010110101"

for i in plain_text:
    encrypted = encrypt(i, key)
    encrypted = str(bin(int(encrypted))[2:].zfill(8))
    text_new += (UTF(encrypted))
    # print(encrypted)
    decrypted = decrypt(encrypted, key)
    decrypted = str(bin(int(decrypted))[2:].zfill(8))
    text_ture += (UTF(decrypted))
print(text_new)
print(text_ture)


def encrypt_text(text, key):
    """输入转换"""
    plain_text = []
    for i in text:
        plain_text.append(ASCII(i))
    text_new = ''
    for i in plain_text:
        encrypted = encrypt(i, key)
        encrypted = str(bin(int(encrypted))[2:].zfill(8))
        text_new += (UTF(encrypted))
    return text_new


def decrypt_text(text, key):
    """输出转换"""
    decrypted_text = ''
    plain_text = []
    for i in text:
        plain_text.append(ASCII(i))
    for i in plain_text:
        decrypted = decrypt(i, key)
        decrypted_text += UTF(str(bin(int(decrypted))[2:].zfill(8)))
    return decrypted_text

def try_key(cipher_text, plain_text):
    start_time = time.time()
    for key in range(0, 1024):
        # print(start,end)
        # print(key)
        key_bin = bin(int(key))[2:].zfill(10)
        # print(key_bin)
        decrypted_text = ''
        for i in cipher_text:
            i = ASCII(i)
            decrypted_text += UTF(str(bin(int(decrypt(i, key_bin)))[2:].zfill(8)))
        if decrypted_text == plain_text:
            end_time = time.time()  # 获取结束时间的时间戳
            print(f"Brute force completed in {end_time - start_time:.2f} seconds.")
            print(f"Found key: {key_bin}")
            return key_bin
    return None

def brute_force_decrypt(cipher_text, plain_text):
    threads = []
    results = []

    results.append(try_key(cipher_text,plain_text))


    # 如果找到密钥，返回密钥，否则返回None
    return results[0] if results else None

def on_encrypt():
    """加密操作"""
    key = "0010110101"
    text = entry.get("1.0", "end-1c")
    encrypted = encrypt_text(text, key)
    result_label.config(text=f"Encrypted: {encrypted}")


def on_decrypt():
    """解密操作"""
    key = "0010110101"
    text = entry.get("1.0", "end-1c")
    decrypted = decrypt_text(text, key)
    result_label.config(text=f"Decrypted: {decrypted}")

def on_brute_force(cipher_text):
    plain_text = 'Hello World'  # 已知的明文
    cipher_text_bin = [ASCII(i) for i in cipher_text]
    cipher_text_int = int(''.join(cipher_text_bin), 2)
    # print(cipher_text_int)
    key = brute_force_decrypt(cipher_text, plain_text)
    if key:
        result_label.config(text=f"Decrypted with key {key}: {decrypt_text(cipher_text, key)}")
    else:
        result_label.config(text="No key found")


# 创建主窗口
root = tk.Tk()
root.title("Encryption/Decryption Tool")

# 创建文本输入框
entry = tk.Text(root, height=10, width=50)
entry.pack(pady=10)

# 创建加密按钮
encrypt_button = tk.Button(root, text="Encrypt", command=on_encrypt)
encrypt_button.pack(side=tk.LEFT, padx=10)

# 创建解密按钮
decrypt_button = tk.Button(root, text="Decrypt", command=on_decrypt)
decrypt_button.pack(side=tk.LEFT, padx=10)


# 创建暴力破解按钮
brute_force_button = tk.Button(root, text="Brute Force", command=lambda: on_brute_force(entry.get("1.0", "end-1c")))
brute_force_button.pack(side=tk.LEFT, padx=10)

# 暴力破解操作
# 创建结果显示标签
result_label = tk.Label(root, text="Results will appear here")
result_label.pack(pady=10)

# 运行主循环
root.mainloop()









